(in-package :jingoh.documentizer)

(defun about-symbols(meta-data)
  (flet((put(section)
	  (with-doc-directory((merge-pathnames(section-html section)))
	    (format t "# ~{~A~^, ~}~&"(mapcar #'escape-*(section-names section)))
	    (about-symbol (section-body section)))))
    (dolist(section(meta-data-singles meta-data))
      (put section))
    (dolist(section(meta-data-commons meta-data))
      (put section))))

(defun about-symbol (body)
  (labels((REC(list)
	    (unless(endp list)
	      (BODY (car list)(cdr list))))
	  (BODY(elt rest)
	    (cond
	      ((uiop:string-prefix-p ";;;; " elt)
	       (write-string "## ")
	       (write-line elt *standard-output* :start 5))
	      ((uiop:string-prefix-p ";;; " elt)
	       (write-string "### ")
	       (write-line elt *standard-output* :start 4))
	      ((uiop:string-prefix-p ";; " elt)
	       (write-string "#### ")
	       (write-line elt *standard-output* :start 3))
	      ((uiop:string-prefix-p "; " elt)
	       (write-line elt *standard-output* :start 2))
	      ((uiop:string-prefix-p "#?" elt)
	       (write-line "```lisp")
	       (write-line elt)
	       (write-string (car rest))
	       (write-char #\space)
	       (write-line (cadr rest))
	       (loop :with ops = 0
		     :for (key value) :on (cddr rest) :by #'cddr
		     :while (uiop:string-prefix-p "," key)
		     :do (write-string key)
		     (write-char #\space)
		     (write-line value)
		     (incf ops)
		     :finally (format t "```~2%")
		     (setf rest (nthcdr (+ 2 (* 2 ops))rest))))
	      ((uiop:string-prefix-p "#+syntax" elt)
	       (write-string "### ")
	       (write-line elt *standard-output* :start 2))
	      ((uiop:string-prefix-p "#+setf" elt)
	       (write-string "### ")
	       (write-line elt *standard-output* :start 2))
	      ((uiop:string-prefix-p "#| " elt)
	       (write-string "# ")
	       (write-line elt *standard-output* 
			   :start 3 :end (- (length elt) 2)))
	      (t nil)); discard
	    (REC rest)))
    (REC body)))

