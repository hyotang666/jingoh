(in-package :jingoh.tester)

(defstruct issue form expected actual position)

(defstruct(test-issue(:include issue))
  test)

(defstruct(condition-issue (:include issue))
  message)

(defstruct(error-was-signaled (:include condition-issue)))
(defstruct(warning-was-signaled (:include condition-issue)))
(defstruct(debugger-was-invoked (:include condition-issue)))
(defstruct(unmatch-condition (:include condition-issue)))

(defstruct(unexpected-success (:include issue)))
(defstruct(unexpected-output (:include issue)))
(defstruct(issue-of-multiple-values (:include issue)))
(defstruct(missing-restarts(:include issue)))
(defstruct(unsatisfied-clause (:include issue))
  args)

(defstruct(wrong-format (:include test-issue)))

#+(or sbcl)
(defmethod make-instance :around ((type structure-class) &rest args)
  (loop :with instance = (closer-mop:class-prototype type)
	:for slot :in (closer-mop:class-slots type)
	:for name = (closer-mop:slot-definition-name slot)
	:do(setf (slot-value instance name)
		 (or (getf args (intern(symbol-name name):keyword))
		     (funcall(closer-mop:slot-definition-initfunction slot))))
	:finally (return instance)))

(defparameter *print-vivid* T)

(defmethod print-object((issue issue)stream)
  (if (null *print-vivid*)
    (call-next-method)
    (let((string (with-output-to-string(stream)
		   (call-next-method issue stream))))
      (princ(regex-replace issue string)stream))))

(defun regex-replace(issue string)
  (labels((REC(slots acc)
	    (if(endp slots)
	      (DO-RETURN acc)
	      (BODY (symbol-name(c2mop:slot-definition-name(car slots)))
		    (cdr slots)
		    :yellow
		    acc)))
	  (BODY(slot-name rest color &optional acc)
	    (destructuring-bind(pre post)(ppcre:split slot-name string :limit 2)
	      (setf string post)
	      (REC rest (list* (uiop:symbol-call :cl-ansi-text color slot-name)
			       pre acc))))
	  (DO-RETURN(acc)
	    (apply #'concatenate 'string (nreverse(push string acc))))
	    )
    (BODY (symbol-name(type-of issue))
	  (c2mop:class-slots(class-of issue))
	  :red)))
